<!DOCTYPE html>
<html lang="en">
 
<head>
    <meta charset="UTF-8">
    <title>Cognify-2.0</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        @keyframes gradient {
            0% {
                background-position: 0% 50%;
            }
 
            50% {
                background-position: 100% 50%;
            }
 
            100% {
                background-position: 0% 50%;
            }
        }
 
        @keyframes slideIn {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
 
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
 
        @keyframes typing {
            0% {
                opacity: 0.3;
            }
 
            50% {
                opacity: 1;
            }
 
            100% {
                opacity: 0.3;
            }
        }
 
        .typing-dot {
            animation: typing 1.4s infinite;
            display: inline-block;
            margin: 0 2px;
        }
 
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
 
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
 
        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            height: 100vh;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
 
        .glass-morphism {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
 
        /* Modified URL styling */
        .hidden-url {
            color: rgb(2, 104, 221);
            text-decoration: none;
            position: relative;
            cursor: pointer;
            background-color: rgba(37, 99, 235, 0.1);
            padding: 0.1em 0.3em;
            border-radius: 0.2em;
        }
 
        .hidden-url:hover {
            background-color: rgba(37, 99, 235, 0.2);
        }
 
        .hidden-url:after {
            content: 'ðŸ”—';
            font-size: 0.8em;
            margin-left: 0.3em;
            opacity: 0.7;
        }
 
        .message-wrapper {
            animation: slideIn 0.3s ease-out;
        }
 
        .message-image {
            max-width: 200px;
            max-height: 150px;
            object-fit: cover;
            transition: transform 0.3s ease;
            cursor: pointer;
        }
 
        .message-image:hover {
            transform: scale(1.05);
        }
 
        .chat-container-wrapper {
            height: calc(100vh - 160px);
            position: relative;
        }
 
        .compact-input {
            height: 45px;
            font-size: 0.95rem;
        }
 
        .compact-button {
            height: 45px;
            padding: 0 1.25rem;
        }
 
        .footer-container {
            height: 65px;
        }
 
        .loading-overlay {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(4px);
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1000;
            display: none;
        }
 
        .loading-overlay.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }
 
        #chat-container {
            scrollbar-width: thin;
            scrollbar-color: rgba(155, 155, 155, 0.5) transparent;
        }
 
        #chat-container::-webkit-scrollbar {
            width: 6px;
        }
 
        #chat-container::-webkit-scrollbar-track {
            background: transparent;
        }
 
        #chat-container::-webkit-scrollbar-thumb {
            background-color: rgba(155, 155, 155, 0.5);
            border-radius: 20px;
            border: transparent;
        }
    </style>
</head>
 
<body class="flex flex-col font-sans antialiased">
    <div class="container mx-auto px-4 py-3 flex-grow flex flex-col max-w-7xl">
        <!-- Header -->
        <header class="flex justify-between items-center mb-2 glass-morphism p-3 rounded-xl">
            <div class="flex items-center space-x-4">
                <div
                    class="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600">
                    <i class="bi bi-robot"></i> Cognify
                </div>
                <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">v2.0</span>
            </div>
            <div class="flex space-x-2">
                <button onclick="window.location.href='/layout'"
                    class="bg-gradient-to-r from-green-500 to-green-600 text-white px-3 py-1.5 rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-300 shadow-lg flex items-center space-x-1 text-sm">
                    <i class="fas fa-upload"></i>
                    <span>Upload PDF</span>
                </button>
            </div>
        </header>
 
        <!-- Chat Area -->
        <main class="flex-grow glass-morphism rounded-xl shadow-2xl p-4 mb-2 chat-container-wrapper">
            <div id="chat-container" class="h-full overflow-y-auto space-y-4 pr-2">
                {% for message in chat_history %}
                <div class="message-wrapper {% if message.role == 'user' %}flex justify-end{% endif %}">
                    <div
                        class="{% if message.role == 'user' %}bg-blue-100 ml-auto{% else %}bg-gray-100{% endif %} p-4 rounded-xl shadow-md max-w-[80%] space-y-2">
                        {% if message.role == 'assistant' %}
                        <div class="flex items-center space-x-2 mb-2">
                            <i class="bi bi-robot text-xl text-blue-600"></i>
                            <span class="font-medium text-blue-600">Cognify</span>
                        </div>
                        {% endif %}
                        <div class="prose whitespace-pre-wrap" id="message-content-{{ loop.index }}">{{ message.content
                            }}</div>
                        {% if message.role == 'assistant' and message.images %}
                        <div class="mt-4 grid grid-cols-2 gap-4">
                            {% for image in message.images %}
                            <img src="data:image/png;base64,{{ image.base64_image }}" alt="{{ image.title }}"
                                class="message-image rounded-lg shadow-md" onclick="openModal(this)"
                                title="{{ image.title }}">
                            {% endfor %}
                        </div>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
 
            <!-- Loading overlay -->
            <div id="loading-overlay" class="loading-overlay rounded-xl">
                <div class="bg-white p-4 rounded-lg shadow-lg flex items-center space-x-3">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                    <div class="text-gray-700">
                        Thinking
                        <span class="typing-dot">.</span>
                        <span class="typing-dot">.</span>
                        <span class="typing-dot">.</span>
                    </div>
                </div>
            </div>
        </main>
 
        <!-- Footer -->
        <footer class="glass-morphism p-3 rounded-xl footer-container">
            <div class="flex space-x-2 h-full">
                <form id="chat-form" method="POST" class="flex-grow flex space-x-2">
                    <div class="flex-grow">
                        <input type="text" id="user-input" name="user_input" placeholder="Ask me something..." required
                            class="w-full rounded-lg border-2 border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-400 transition-all duration-300 compact-input px-4 py-2">
                    </div>
                    <button type="submit"
                        class="bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-300 shadow-lg flex items-center space-x-1 compact-button">
                        <i class="fas fa-paper-plane"></i>
                        <span class="hidden sm:inline">Send</span>
                    </button>
                </form>
                <form id="clear-form" method="POST" action="/clear">
                    <input type="hidden" name="action" value="clear">
                    <button type="submit" id="clear-chat-btn"
                        class="bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg hover:from-red-600 hover:to-red-700 transition-all duration-300 shadow-lg flex items-center space-x-1 compact-button">
                        <i class="fas fa-trash-alt"></i>
                        <span class="hidden sm:inline">Clear</span>
                    </button>
                </form>
            </div>
        </footer>
    </div>
 
    <!-- Image Modal -->
    <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center">
        <button class="absolute top-4 right-4 text-white text-3xl hover:text-gray-300 transition-colors"
            onclick="closeModal()">Ã—</button>
        <img id="modalImage" class="max-w-[90%] max-h-[90vh] rounded-lg" src="" alt="Enlarged image">
    </div>
 
    <script>
        const chatContainer = document.getElementById('chat-container');
        const loadingOverlay = document.getElementById('loading-overlay');
        const chatForm = document.getElementById('chat-form');
        const clearForm = document.getElementById('clear-form');
        const userInput = document.getElementById('user-input');
 
        // Modified URL processing function
        function processURLs() {
            const messages = document.querySelectorAll('.prose');
            const urlRegex = /(https?:\/\/[^\s]+)/g;
 
            messages.forEach(message => {
                const content = message.innerHTML;
                const processedContent = content.replace(urlRegex, url => {
                    const displayText = 'Link';
                    return `<span class="hidden-url" onclick="handleUrlClick('${url}')">${displayText}</span>`;
                });
                message.innerHTML = processedContent;
            });
        }
 
        // New function to handle URL clicks
        function handleUrlClick(url) {
            const confirmation = confirm('Open this link in a new tab?');
            if (confirmation) {
                window.open(url, '_blank');
            }
        }
 
        // Initialize on page load
        window.onload = function () {
            scrollToBottom();
            initializeEventListeners();
            processURLs();
        };
 
        function scrollToBottom() {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
 
        function initializeEventListeners() {
            chatForm.addEventListener('submit', handleFormSubmit);
            clearForm.addEventListener('submit', handleClearChat);
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
        }
 
        async function handleFormSubmit(e) {
            e.preventDefault();
            const input = userInput.value.trim();
            if (!input) return;
 
            showLoading();
 
            try {
                const formData = new FormData(chatForm);
                const response = await fetch('/', {
                    method: 'POST',
                    body: formData
                });
 
                if (!response.ok) throw new Error('Network response was not ok');
 
                const html = await response.text();
                document.documentElement.innerHTML = html;
 
                initializeEventListeners();
                processURLs();
                scrollToBottom();
            } catch (error) {
                console.error('Error:', error);
                hideLoading();
            }
        }
 
        async function handleClearChat(e) {
            e.preventDefault();
            showLoading();
 
            try {
                const response = await fetch('/clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'action=clear'
                });
 
                if (!response.ok) throw new Error('Network response was not ok');
 
                window.location.href = '/';
            } catch (error) {
                console.error('Error:', error);
                hideLoading();
            }
        }
 
        function showLoading() {
            loadingOverlay.classList.add('active');
        }
 
        function hideLoading() {
            loadingOverlay.classList.remove('active');
        }
 
        function openModal(img) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            modal.classList.remove('hidden');
            modalImg.src = img.src;
            modalImg.alt = img.alt;
            document.body.style.overflow = 'hidden';
        }
 
        function closeModal() {
            const modal = document.getElementById('imageModal');
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    </script>
</body>
 
</html>
 